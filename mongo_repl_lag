#!/usr/bin/env python
import os
import sys
import re

try:
    import pymongo
except:
    print "need to install pymongo"
    sys.exit(2)

uri = os.environ.get('uri', 'localhost:27017')
rsName = os.environ.get('replicaSet')

hostOnly = re.compile("^(.*):\d+$")

def escape_munin(s):
    return '_'+re.sub('[-.]', '_', s)

def get_conn():
    kwargs = {"read_preference": pymongo.ReadPreference.SECONDARY}
    if rsName != None:
        kwargs["replicaSet"] = rsName
    con = pymongo.MongoReplicaSetClient(uri, **kwargs)
    return con

def get_members():
    con = get_conn()
    rs_status = con.admin.command("replSetGetStatus")
    return [member for member in rs_status["members"] if member["state"] in (1,2,3)]

def do_config():
    members = get_members()

    print "graph_title Replication lag"
    print "graph_vlabel ms"
    print "graph_category MongoDB"
    print "graph_args --lower-limit 0"
    print "graph_scale no"

    warning = os.environ.get("repl_lag.warning")
    critical = os.environ.get("repl_lag.critical")

    for m in members:
        if m["state"] != 1:
            host = hostOnly.match(m['name']).group(1)
            escaped_host = escape_munin(host)
            print "%s.label %s" % (escaped_host, host)
            print "%s.type GAUGE" % escaped_host
            print "%s.min 0" % escaped_host
            if warning != None:
                print "%s.warning %s" % (escaped_host, warning)
            if critical != None:
                print "%s.critical %s" % (escaped_host, critical)

def get_primary_optime(con):
    rs_status = con.admin.command("replSetGetStatus")
    return [member["optime"] for member in rs_status["members"] if member["state"] == 1][0]

def do_data():
    members = get_members()

    master = [m for m in members if m["state"] == 1][0]
    masterOptime = master["optime"].time

    for m in members:
        if m["state"] != 1:
            host = hostOnly.match(m['name']).group(1)
            escaped_host = escape_munin(host)
            slaveOptime = m["optime"].time
            replicationLag = masterOptime - slaveOptime
            print "%s.value %s" % (escaped_host, replicationLag)

if __name__ == '__main__':
    if len(sys.argv) > 1 and sys.argv[1] == 'config':
        do_config()
    else:
        do_data()
